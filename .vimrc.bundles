" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"
"                    __ _ _____              _
"         ___ _ __  / _/ |___ /      __   __(_)_ __ ___
"        / __| '_ \| |_| | |_ \ _____\ \ / /| | '_ ` _ \
"        \__ \ |_) |  _| |___) |_____|\ V / | | | | | | |
"        |___/ .__/|_| |_|____/        \_/  |_|_| |_| |_|
"            |_|
"
"   This is the personal .vimrc.bundles file of Steve Francia.
"   While much of it is beneficial for general use, I would
"   recommend picking out the parts you want and understand.
"
"   This file imports the various plugins of spf13. If you
"   wish to alter which groups are imported, see vimrc.before.
"   If you wish to add or remove individual bundles, create
"   ~/.vimrc.bundles.local and `Bundle` or `UnBundle` as needed
"   from there.
"
"   You can find me at http://spf13.com
" }

" Environment {

    " Basics {
        set nocompatible        " Must be first line
        set background=dark     " Assume a dark background
    " }

" }

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/bundle')
" Plugs {

    " Deps {
        Plug 'tomtom/tlib_vim'
    " }

    " In your .vimrc.before.local file
    " list only the plugin groups you will use
    if !exists('g:spf13_bundle_groups')
        let g:spf13_bundle_groups = [
            \ 'general',
            \ 'easymotion',
            \ 'fzf.vim',
            \ 'gruvbox',
            \ 'vim-lsp',
            \ 'tabnine',
            \ 'writing',
            \ 'misc',
            \ 'programming',
            \ 'go',
            \ 'plantuml',
            \ 'debugging',
            \ 'minimap',
            \ ]
    endif

    " To override all the included bundles, add the following to your
    " .vimrc.bundles.local file:
    "   let g:override_spf13_bundles = 1
    if !exists("g:override_spf13_bundles")

    " General {
        if count(g:spf13_bundle_groups, 'general')
            Plug 'tpope/vim-surround'
            Plug 'tpope/vim-repeat'
            Plug 'rhysd/conflict-marker.vim'
            Plug 'jiangmiao/auto-pairs'
            Plug 'ctrlpvim/ctrlp.vim'
            Plug 'tacahiroy/ctrlp-funky'
            "Plug 'terryma/vim-multiple-cursors'
            "Plug 'vim-scripts/sessionman.vim'
            Plug 'zivyangll/git-blame.vim'
            "Plug 'mbbill/undotree'
            Plug 'nathanaelkane/vim-indent-guides'
            Plug 'Yggdroot/indentLine'
            "if !exists('g:spf13_no_views')
            "    Plug 'vim-scripts/restore_view.vim'
            "endif
            Plug 'airblade/vim-gitgutter'
            Plug 'tpope/vim-abolish'
            Plug 'osyo-manga/vim-over'
            Plug 'kana/vim-textobj-user'
            Plug 'kana/vim-textobj-indent'
            Plug 'gcmt/wildfire.vim'
            Plug 'mhinz/vim-startify'
            " statusline
            Plug 'itchyny/lightline.vim'
            Plug 'mengelbrecht/lightline-bufferline'
            Plug 'antoinemadec/FixCursorHold.nvim'
            if has('nvim')
                Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
            endif
            Plug 'voldikss/vim-floaterm'
            Plug 't9md/vim-choosewin'
            Plug 'tpope/vim-eunuch'
        endif
    " }

    " Easymotion {
        if count(g:spf13_bundle_groups, 'easymotion')
            Plug 'easymotion/vim-easymotion'
            Plug 'haya14busa/incsearch.vim'
            Plug 'haya14busa/incsearch-fuzzy.vim'
            Plug 'haya14busa/incsearch-easymotion.vim'
        endif
    " }

    " fzf.vim or vim-clap, or nothing {
        if count(g:spf13_bundle_groups, 'fzf.vim')
            Plug 'junegunn/fzf', { 'do': { -> fzf#install()  }  }
            Plug 'junegunn/fzf.vim'
        elseif count(g:spf13_bundle_groups, 'vim-clap')
            Plug 'liuchengxu/vim-clap', { 'do': { -> clap#installer#force_download() } }
        endif
    " }

    " Theme section{
        if count(g:spf13_bundle_groups, 'vim-colors-solarized')
            Plug 'altercation/vim-colors-solarized'
        elseif count(g:spf13_bundle_groups, 'nvim-colors-solarized')
            Plug 'arakashic/nvim-colors-solarized'
        elseif count(g:spf13_bundle_groups, 'NeoSolarized')
            Plug 'overcache/NeoSolarized'
        elseif count(g:spf13_bundle_groups, 'vim-solarized8')
            Plug 'lifepillar/vim-solarized8'
        elseif count(g:spf13_bundle_groups, 'vim-one')
            Plug 'rakr/vim-one'
        elseif count(g:spf13_bundle_groups, 'vim-github-colorscheme')
            Plug 'endel/vim-github-colorscheme'
        elseif count(g:spf13_bundle_groups, 'dracula')
            Plug 'dracula/vim', { 'as': 'dracula' }
        elseif count(g:spf13_bundle_groups, 'material')
            Plug 'kaicataldo/material.vim', { 'branch': 'main' }
        elseif count(g:spf13_bundle_groups, 'onehalf')
            Plug 'sonph/onehalf', { 'rtp': 'vim' }
        elseif count(g:spf13_bundle_groups, 'gruvbox')
            Plug 'morhetz/gruvbox'
        elseif count(g:spf13_bundle_groups, 'molokai')
            Plug 'tomasr/molokai'
        endif
    " }

    " Writing {
        if count(g:spf13_bundle_groups, 'writing')
            Plug 'reedes/vim-litecorrect'
            Plug 'reedes/vim-textobj-sentence'
            Plug 'reedes/vim-textobj-quote'
            Plug 'reedes/vim-wordy'
            Plug 'ntpeters/vim-better-whitespace'
            if has('nvim')
                Plug 'kyazdani42/nvim-web-devicons'
                Plug 'nvim-lua/plenary.nvim'
                Plug 'folke/todo-comments.nvim'
                Plug 'folke/trouble.nvim'
                Plug 'nvim-telescope/telescope.nvim'
            endif
            Plug 'numToStr/Comment.nvim'
        endif
    " }

    " General Programming {
        if count(g:spf13_bundle_groups, 'programming')
            " Pick one of the checksyntax, jslint, or syntastic
            "Plug 'vim-syntastic/syntastic'
            Plug 'tpope/vim-fugitive'
            " Plug 'mattn/webapi-vim'
            Plug 'mattn/gist-vim'
            "Plug 'preservim/nerdcommenter'
            Plug 'tpope/vim-commentary'
            Plug 'godlygeek/tabular'
            Plug 'luochen1990/rainbow'
            if executable('ctags')
                Plug 'majutsushi/tagbar'
            endif
            Plug 'editorconfig/editorconfig-vim'
            "Plug 'sheerun/vim-polyglot' "slow down about 20ms
            Plug 'thinca/vim-quickrun'
            Plug 'tyru/open-browser.vim'
            Plug 'kannokanno/previm'
            "Plug 'rhysd/vim-clang-format'
            Plug 'vim-autoformat/vim-autoformat'
        endif
    " }

    " Debugging {
        if count(g:spf13_bundle_groups, 'debugging')
            Plug 'puremourning/vimspector'
        endif
    " }

    " Vim-lsp {
        if count(g:spf13_bundle_groups, 'vim-lsp')
            Plug 'prabirshrestha/vim-lsp'
        endif
    " }

    " tabnine {
        if count(g:spf13_bundle_groups, 'tabnine')
            Plug 'tabnine/YouCompleteMe'
        endif
    " }

    " Cheat.sh {
        if count(g:spf13_bundle_groups, 'cheat.sh')
            Plug 'dbeniamine/cheat.sh-vim'
        endif
    " }

    " Rust {
        if count(g:spf13_bundle_groups, 'rust')
            Plug 'rust-lang/rust.vim'
            Plug 'racer-rust/vim-racer'
        endif
    " }

    " Scala {
        if count(g:spf13_bundle_groups, 'scala')
            Plug 'derekwyatt/vim-scala'
            Plug 'derekwyatt/vim-sbt'
            Plug 'drmingdrmer/xptemplate'
        endif
    " }

    " Haskell {
        if count(g:spf13_bundle_groups, 'haskell')
            Plug 'travitch/hasksyn'
            Plug 'dag/vim2hs'
            Plug 'Twinside/vim-haskellConceal'
            Plug 'Twinside/vim-haskellFold'
            Plug 'lukerandall/haskellmode-vim'
            Plug 'eagletmt/neco-ghc'
            Plug 'eagletmt/ghcmod-vim'
            Plug 'Shougo/vimproc.vim'
            Plug 'adinapoli/cumino'
            Plug 'bitc/vim-hdevtools'
        endif
    " }

    " Ruby {
        if count(g:spf13_bundle_groups, 'ruby')
            Plug 'tpope/vim-rails'
            let g:rubycomplete_buffer_loading = 1
            "let g:rubycomplete_classes_in_global = 1
            "let g:rubycomplete_rails = 1
        endif
    " }

    " Puppet {
        if count(g:spf13_bundle_groups, 'puppet')
            Plug 'rodjek/vim-puppet'
        endif
    " }

    " Golang {
        if count(g:spf13_bundle_groups, 'go')
            "Plug 'Blackrush/vim-gocode'
            Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
        endif
    " }

    " Elixir {
        if count(g:spf13_bundle_groups, 'elixir')
            Plug 'elixir-lang/vim-elixir'
            Plug 'carlosgaldino/elixir-snippets'
            Plug 'mattreduce/vim-mix'
        endif
    " }

    " PlantUML {
        if count(g:spf13_bundle_groups, 'plantuml')
            Plug 'aklt/plantuml-syntax'
            Plug 'weirongxu/plantuml-previewer.vim'
        endif
    " }

    " Misc {
        if count(g:spf13_bundle_groups, 'misc')
            Plug 'tpope/vim-markdown'
            Plug 'greyblake/vim-preview'
            Plug 'tpope/vim-cucumber'
            Plug 'cespare/vim-toml'
            Plug 'quentindecock/vim-cucumber-align-pipes'
            Plug 'saltstack/salt-vim'
            Plug 'pboettch/vim-cmake-syntax'
            Plug 'cdelledonne/vim-cmake'
        endif
    " }

    " minimap {
        if count(g:spf13_bundle_groups, 'misc')
            Plug 'wfxr/minimap.vim', {'do': ':!cargo install --locked code-minimap'}
        endif
    " }
    endif

" }

" Use fork bundles config if available {
    if filereadable(expand("~/.vimrc.bundles.fork"))
        source ~/.vimrc.bundles.fork
    endif
" }

" Use local bundles config if available {
    if filereadable(expand("~/.vimrc.bundles.local"))
        source ~/.vimrc.bundles.local
    endif
" }

" Initialize plugin system
call plug#end()
